<?php
/**
 * Created by PhpStorm.
 * User: THINK
 * Date: 2017/11/19
 * Time: 15:15
 */

namespace app\index\command;


use think\Config;
use think\console\Command;
use think\console\Input;
use think\console\Output;
use think\Db;

class OrderProcessor extends Command
{
    public function configure()
    {
        parent::configure(); // TODO: Change the autogenerated stub
        $this->setName('OrderProcessor');
    }

    public function execute(Input $input, Output $output)
    {
//        parent::execute($input, $output); // TODO: Change the autogenerated stub
        $output->writeln('Order Processing');

        $redis = new \Redis();
        $redis->connect(Config::get('redis.host'), Config::get('redis.port'));

        # 处理订单队列
        # 永远执行（守护执行）
        while(true) {
//            $sn = $redis->rpop('order_queue');
//            if (!$sn) continue;

            $result = $redis->brPop(['order_queue'], 20);
            if (!$result) continue ;
            $sn = $result[1];// $result = ['order_queue', 'sn']

            sleep(4);

            # 记录下当前处理的订单号
            $redis->set('curr_sn', $sn);


            # 获取商品信息，order_product表。
            $rows = Db::name('order')->alias('o')
                ->join('__ORDER_PRODUCT__ op', 'o.id=op.order_id')
                ->join('__PRODUCT__ p', 'op.product_id=p.id')
                ->field('p.id, p.quantity, op.buy_quantity')
                ->where('o.sn', $sn)
                ->select()
                ;
            # 校验
            $pass = true;// 假设库存检测通过
            foreach($rows as $row) {
                if ($row['buy_quantity'] > $row['quantity']) {
                    ## 库存不够
                    $pass = false;
                    break;
                }
            }

            if ($pass) {
                # 库存检测通过，可以下单
                # 调整订单状态，确认
                Db::name('order')
                    ->where('sn', $sn)
                    ->update([
                        'status' => 2, // 确认
                        'shipping_status' => 1,
                        'payment_status' => 1,
                    ])
                    ;
                # 扣减库存
                foreach($rows as $row) {
                    Db::name('product')
                        ->where('id', $row['id'])
                        ->update([
                            'quantity' => $row['quantity']-$row['buy_quantity'],
                        ])
                        ;
                }
                $output->writeln('Order: ' . $sn . ' success!');
            } else {
                # 库存不足
                # 调整订单状态，取消
                Db::name('order')
                    ->where('sn', $sn)
                    ->update([
                        'status' => 3, // 挂起
                    ])
                ;
                $output->writeln('Order: ' . $sn . ' fail!');
            }

        }
    }
}